title:      "Challenge 15: Small Racket"
icon:       fa-code
navigation: []
internal:
external:
body:       |

    <img src="static/img/challenge15-racket.png" class="img-responsive pull-right">

    In [Programming Paradigms], students explore all sorts of different
    languages such as [Scheme], [Python], [Java], and [JavaScript] in order to
    familiarize themselves with various programming paradigms such as
    [functional programming], [object-oriented programming], and [event-driven
    programming].  For instance, at the beginning of the semester, the students had
    to implement a [Tic-tac-toe] evaluator in [Scheme].  Unfortunately, they had to
    use a *janky* [Scheme] implementation called [Guile] which produces lovely error
    messages such as:

        :::text
        ERROR: In procedure car: Wrong type (expecting pair): ()

    Not satisfied with this inferior [Scheme][^1], you decide to make your own
    arithmetic [Scheme] interpreter that supports the following [EBNF] grammar:

        :::text
        <digit>         = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
        <number>        = {<digit>}
        <op>            = - | + | * | /
        <expression>    = (<op> <expression> ...) | <number>

    Given the above definition, note the following:

    1. You only have to support [natural numbers] (i.e. `0`, `1`, `10`, `100`,
    ...)

    2. You only have to support basic arithmetic operators: addition,
    subtraction, multiplication, and division.

    3. You have to support **variable** length expressions (that is operations
    that take two or more arguments) or numeric literals.

    4. You do not have to worry about syntax errors or invalid input. You can
    safely assume that any given test input will follow these rules.

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-bolt"></i> Blast From the Past

    If you need more guidance on how to solve this project, you can check out
    the [Project 01: Arithmetic Scheme Interpreter] write-up from a previous
    instance of the [Data Structures] course (**note that version only supports
    binary operations, you need to support variable length operations**).

    If you have already written a [Scheme] interpreter, challenge yourself by
    writing one in a different language.

    </div>

    [^1]: Some better [Scheme] implementations: [Racket], [Chicken Scheme], and
    my former love [Gauche Scheme].

    [Programming Paradigms]: https://www3.nd.edu/~skumar5/teaching/2019-fall-pp.html
    [Scheme]:       https://en.wikipedia.org/wiki/Scheme_(programming_language)
    [Python]:       https://www.python.org/
    [Java]:         https://www.java.com/en/
    [JavaScript]:   https://www.javascript.com/
    [functional programming]:       https://en.wikipedia.org/wiki/Functional_programming
    [object-oriented programming]:  https://en.wikipedia.org/wiki/Object-oriented_programming
    [event-driven programming]:     https://en.wikipedia.org/wiki/Event-driven_programming
    [tic-tac-toe]:  https://en.wikipedia.org/wiki/Tic-tac-toe
    [Guile]:        https://www.gnu.org/software/guile/
    [EBNF]:         https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form
    [natural numbers]:  https://en.wikipedia.org/wiki/Natural_number
    [racket]:           http://www.racket-lang.org/
    [chicken scheme]:   https://www.call-cc.org/
    [gauche scheme]:    http://practical-scheme.net/gauche/
    [Project 01: Arithmetic Scheme Interpreter]: https://www3.nd.edu/~pbui/teaching/cse.30331.fa16/project01.html
    [data structures]: https://www3.nd.edu/~pbui/teaching/cse.30331.fa16/

    ## Input

    You interpreter will be given multiple lines of input where each line is a
    single [Scheme] expression as defined by the [EBNF] grammar above.  You
    should process these expressions until you reach `EOF`.

    ### Example Input

        :::scheme
        1
        (1)
        (+ 1 2 3 4)
        (+ (- 1 2) (* 3 4))

    ## Output

    For each [Scheme] expression (that is for each line), output the final
    evaluation result.

    ### Example Output

        :::text
        1
        1
        10
        11

    ## Submission

    To submit your work, follow the same procedure you used for [Reading 01]:

        :::bash
        $ cd path/to/cse-34872-su20-assignments     # Go to assignments repository
        $ git checkout master                       # Make sure we are on master
        $ git pull --rebase                         # Pull any changes from GitHub

        $ git checkout -b challenge15               # Create and checkout challenge15 branch

        $ $EDITOR challenge15/program.cpp           # Edit your code

        $ git add challenge15/program.cpp           # Stage your changes
        $ git commit -m "challenge15: done"         # Commit your changes

        $ git push -u origin challenge15            # Send changes to GitHub

    To check your code, you can use the `.scripts/submit.py` script or [curl]:

        :::bash
        $ .scripts/submit.py
        Submitting challenge15 assignment ...
        Submitting challenge15 code ...
          Result Success
           Score 6.00
            Time 0.47

        $ curl -F source=@challenge15/program.cpp https://dredd.h4x0r.space/code/cse-34872-su20/challenge15
        {"result": "Success", "score": 6, "time": 0.4650895595550537}

    <div class="alert alert-success" markdown="1">
    #### <i class="fa fa-github"></i> Pull Request

    Once you have commited your work and pushed it to [GitHub], remember to
    create a **pull request** and assign it to the **teaching assistant**.
    </div>

    [GitHub]:           https://github.com
    [HackerRank]:       https://www.hackerrank.com
    [LeetCode]:         https://leetcode.com
    [Reading 01]:       reading01.html
    [curl]:             https://curl.haxx.se/
